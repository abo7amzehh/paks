function split(szFullString, szSeparator) local nFindStartIndex = 1 local nSplitIndex = 1 local nSplitArray = {} while true do local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex) if not nFindLastIndex then nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString)) break end nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1) nFindStartIndex = nFindLastIndex + string.len(szSeparator) nSplitIndex = nSplitIndex + 1 end return nSplitArray end function xgxc(szpy, qmxg) for x = 1, #(qmxg) do xgpy = szpy + qmxg[x]["offset"] xglx = qmxg[x]["type"] xgsz = qmxg[x]["value"] gg.setValues({[1] = {address = xgpy, flags = xglx, value = xgsz}}) xgsl = xgsl + 1 end end function xqmnb(qmnb) gg.clearResults() gg.setRanges(qmnb[1]["memory"]) gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"]) if gg.getResultCount() == 0 then gg.toast(qmnb[2]["name"] .. "开启失败") else gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) if gg.getResultCount() == 0 then gg.toast(qmnb[2]["name"] .. "开启失败") else sl = gg.getResults(999999) sz = gg.getResultCount() xgsl = 0 if sz > 999999 then sz = 999999 end for i = 1, sz do pdsz = true for v = 4, #(qmnb) do if pdsz == true then pysz = {} pysz[1] = {} pysz[1].address = sl[i].address + qmnb[v]["offset"] pysz[1].flags = qmnb[v]["type"] szpy = gg.getValues(pysz) pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value szpd = split(pdpd, ";") tzszpd = szpd[1] pyszpd = szpd[2] if tzszpd == pyszpd then pdjg = true pdsz = true else pdjg = false pdsz = false end end end if pdjg == true then szpy = sl[i].address xgxc(szpy, qmxg) xgjg = true end end if xgjg == true then gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据") else gg.toast(qmnb[2]["name"] .. "开启失败") end end end end
--配置↑↑↑勿修改，调用方法   xqmnb(qmnb)
function split(szFullString, szSeparator) local nFindStartIndex = 1 local nSplitIndex = 1 local nSplitArray = {} while true do local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex) if not nFindLastIndex then nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString)) break end nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1) nFindStartIndex = nFindLastIndex + string.len(szSeparator) nSplitIndex = nSplitIndex + 1 end return nSplitArray end function xgxc(szpy, Loading1) for x = 1, #(Loading1) do xgpy = szpy + Loading1[x]["address"] xglx = Loading1[x]["flags"] xgsz = Loading1[x]["value"] xgdj = Loading1[x]["freeze"] if xgdj == nil or xgdj == "" then gg.setValues({[1] = {address = xgpy, flags = xglx, value = xgsz}}) else gg.addListItems({[1] = {address = xgpy, flags = xglx, freeze = xgdj, value = xgsz}}) end xgsl = xgsl + 1 xgjg = true end end function LoadingQ(Loading) gg.setRanges(Loading[1]["memory"]) gg.searchNumber(Loading[3]["value"], Loading[3]["flags"]) if gg.getResultCount() == 0 then gg.toast(Loading[2]["Projects"] .. "Load失败❌") else gg.refineNumber(Loading[3]["value"], Loading[3]["flags"]) gg.refineNumber(Loading[3]["value"], Loading[3]["flags"]) gg.refineNumber(Loading[3]["value"], Loading[3]["flags"]) if gg.getResultCount() == 0 then gg.toast(Loading[2]["Projects"] .. "Load失败❌") else sl = gg.getResults(999999) sz = gg.getResultCount() xgsl = 0 if sz > 999999 then sz = 999999 end for i = 1, sz do pdsz = true for v = 4, #(Loading) do if pdsz == true then pysz = {} pysz[1] = {} pysz[1].address = sl[i].address + Loading[v]["address"] pysz[1].flags = Loading[v]["flags"] szpy = gg.getValues(pysz) pdpd = Loading[v]["lv"] .. ";" .. szpy[1].value szpd = split(pdpd, ";") tzszpd = szpd[1] pyszpd = szpd[2] if tzszpd == pyszpd then pdjg = true pdsz = true else pdjg = false pdsz = false end end end if pdjg == true then szpy = sl[i].address xgxc(szpy, Loading1) end end if xgjg == true then 
end end end end
function edit(orig,ret)_om=orig[1].memory or orig[1][1]_ov=orig[3].value or orig[3][1]_on=orig[2].name or orig[2][1]
gg.clearResults()gg.setRanges(_om)gg.searchNumber(_ov,orig[3].type or orig[3][2])sz=gg.getResultCount()if sz<1 then gg.toast(_on.." 开启失败")else sl=gg.getResults(50000)for i=1,sz do ist=true for v=4,#orig do if ist==true and sl[i].value==_ov then cd={{}}cd[1].address=sl[i].address+(orig[v].offset or orig[v][2])cd[1].flags=orig[v].type or orig[v][3]szpy=gg.getValues(cd)cdlv=orig[v].lv or orig[v][1]cdv=szpy[1].value if cdlv==cdv then pdjg=true ist=true else pdjg=false ist=false end end end if pdjg==true then szpy=sl[i].address for x=1,#(ret)do xgpy=szpy+(ret[x].offset or ret[x][2])xglx=ret[x].type or ret[x][3]xgsz=ret[x].value or ret[x][1]xgdj=ret[x].freeze or ret[x][4]xgsj={{address=xgpy,flags=xglx,value=xgsz}}if xgdj==true then xgsj[1].freeze=xgdj gg.addListItems(xgsj)else gg.setValues(xgsj)end end xgjg=true end end if xgjg==true then gg.toast(_on.." 开启成功")else gg.toast(_on.." 开启失败")end end end
local app = {}
--设置搜索模式
app.memorySearchMode = function(MEMORY) 
if (MEMORY == 2) then
gg.setRanges(gg.REGION_JAVA_HEAP | gg.REGION_C_HEAP | gg.REGION_C_ALLOC | gg.REGION_C_DATA | gg.REGION_C_BSS | gg.REGION_PPSSPP) 
end 
if (MEMORY == -1) then
gg.setRanges(gg.REGION_VIDEO) 
end 
if (MEMORY == -2) then 
gg.setRanges(gg.REGION_CODE_APP | gg.REGION_CODE_SYS)         
end 
if (MEMORY == 0) then 
gg.setRanges(gg.REGION_ANONYMOUS)
end        
end
function checkType(dataType)	local type 
if dataType =="D" or dataType == "D" then 
type = gg.TYPE_DWORD 
end 
if dataType == "F" then 
type = gg.TYPE_FLOAT 
end 
if dataType == "E" then 
type = gg.TYPE_DOUBLE 
end 
if dataType == "B" or dataType == "B" then 
type =  gg.TYPE_BYTE 
end 
if dataType == "W" or dataType == "W" then 
type = gg.TYPE_WORD os.exit() 
end	
return type 
end
app.memorySearch = function(pkgName, isNewSearch, address, tb, dataType)	
gg.clearResults() 
gg.setVisible(false)	local isSucess = gg.searchNumber(tb[1]["lv"], checkType(dataType), false, gg.SIGN_EQUAL, address, -1);	local t = gg.getResults(9999);	local tab = {}	local data = {}	for i=1, #t do	for j=2, #tb do	tab[j] = {} tab[j].address = t[i].address + tb[j]["offset"] if(tb[j]["type"] == nil) then tab[j].flags = t[i].flags else tab[j].flags = checkType(tb[j]["type"]) end tab = gg.getValues(tab)	if (tab[j].value == tb[j]["lv"]) then data[#data+1] = t[i].address end end	end gg.clearResults() return isSucess, data end app.memoryWrite = function(pkgName, address, value, dataType) gg.setVisible(false)	local t = {}	t[1] ={}	t[1].address = address	t[1].flags = checkType(dataType)	t[1].value = value	return gg.setValues(t) end
GG = {Read,Write} 
function GG.ReadWrite(Read,Writw)TZ = {} dataTZ = Read[1] offset = dataTZ[2] for i=1,#Read do TZA = Read[i] LV = {["lv"] = TZA[1],["offset"] = TZA[2]-offset} table.insert(TZ, i, LV) end app.memorySearchMode(Memory) isSuuess,TUG = app.memorySearch(pkgName, true, 0, TZ, Type) if TUG[1] == nil then  else for ii=1,#TUG do for iii=1,#Write do dataxg = Write[iii] value = dataxg[1] Deviant = dataxg[2] app.memoryWrite(pkgName,TUG[ii]+Deviant-offset,value,Type) end end gg.toast(ID.. "开启成功") end end
function SearchWrite(Search, Write, Type)
gg.clearResults()
gg.setVisible(false)
gg.searchNumber(Search[1][1], Type)
local t = gg.getResults(9999)
gg.clearResults()
if t ~= nil then
local r = {}
for j=2, #Search do
for i, v in ipairs(t) do
r[i] = {}
r[i].address = v.address + Search[j][2] - Search[1][2]
r[i].flags = v.flags
end
r = gg.getValues(r)
for i = #t, 1, -1 do
if (tostring(r[i].value) ~= tostring(Search[j][1]) ) then
table.remove(t, i)
table.remove(r, i)
end
end       
end
--写入数据
local r = {}
for i=1, #t do
for j=1, #Write do
r[#r+1] = {}
r[#r].address = t[i].address + Write[j][2] - Search[1][2]
r[#r].flags = t[i].flags
r[#r].value = Write[j][1]
r[#r].freeze = true--冻结的话修改后面加false
end
end
gg.setValues(r)
end
end
--gg.addListItems(r)
function split(szFullString, szSeparator) local nFindStartIndex = 1 local nSplitIndex = 1 local nSplitArray = {} while true do local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex) if not nFindLastIndex then nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString)) break end nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1) nFindStartIndex = nFindLastIndex + string.len(szSeparator) nSplitIndex = nSplitIndex + 1 end return nSplitArray end function xgxc(szpy, qmxg) for x = 1, #(qmxg) do xgpy = szpy + qmxg[x]["offset"] xglx = qmxg[x]["type"] xgsz = qmxg[x]["value"] gg.setValues({[1] = {address = xgpy, flags = xglx, value = xgsz}}) xgsl = xgsl + 1 end end function xqmnb(qmnb) gg.clearResults() gg.setRanges(qmnb[1]["memory"]) gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"]) if gg.getResultCount() == 0 then gg.toast(qmnb[2]["name"] .. "开启失败") else gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"]) if gg.getResultCount() == 0 then gg.toast(qmnb[2]["name"] .. "开启失败") else sl = gg.getResults(999999) sz = gg.getResultCount() xgsl = 0 if sz > 999999 then sz = 999999 end for i = 1, sz do pdsz = true for v = 4, #(qmnb) do if pdsz == true then pysz = {} pysz[1] = {} pysz[1].address = sl[i].address + qmnb[v]["offset"] pysz[1].flags = qmnb[v]["type"] szpy = gg.getValues(pysz) pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value szpd = split(pdpd, ";") tzszpd = szpd[1] pyszpd = szpd[2] if tzszpd == pyszpd then pdjg = true pdsz = true else pdjg = false pdsz = false end end end if pdjg == true then szpy = sl[i].address xgxc(szpy, qmxg) xgjg = true end end if xgjg == true then gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据") else gg.toast(qmnb[2]["name"] .. "开启失败") end end end end
-------
function HOME()
SN = gg.choice({
"حماية عالمية ",
    "حماية كورية ",
   "تفعيل باللوبي ",
      " تفعيل بالساحة",
       "تفعيل بالجيم ",  
    "أنتينا العشب",     
   "أزالة الضباب",	
   "الأنتين العادي  ",
      "نزول سريع",
		  	  "أوم",
	  "وال هاك",										  		  
    " خروج "
}, nil, "Abo7amzeh hack️")
if SN == nil then else
if SN ==  1 then a() end 
if SN ==  2 then k() end 
if SN ==  3 then lo() end 
if SN ==  4 then nr() end
if SN ==  5 then gm() end
if SN ==  6 then antg() end
if SN ==  7 then sj() end
if SN ==  8 then ant() end
if SN ==  9 then b() end
if SN ==  10 then mw6() end
if SN ==  11 then wal() end
if SN == 12 then EXIT() end
end
PUBGMH = -1
end
function a()
 edit({
{gg.REGION_C_ALLOC}, --Values Ranges
{"Bypass"}, --Name
{16384, 4},
{16384, 4, 4},
{16384, 8, 4},
{16384, 12, 4},
{16384, 16, 4},
{16384, 20, 4},
{16384, 508, 4},
},
{
{0, 100, 4, true},
})
gg.clearResults()
gg.alert("تم كسر الحمايه ... فجرهم 👹")
end
function k()
  gg.clearResults()
  gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber("1,130,852,172;1,852,139,884", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(10)
  gg.editAll("0", gg.TYPE_DWORD)
  gg.toast("fail")
  gg.clearResults()
  gg.clearResults()
  gg.setRanges(gg.REGION_C_ALLOC)
  gg.searchNumber("1,801,989,935;1,919,905,893;1,768,710,958;1,920,233,061", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(10)
  gg.editAll("0", gg.TYPE_DWORD)
  gg.toast("step1 done")
  gg.clearResults()
  edit({
    {
      gg.REGION_C_ALLOC
    },
    {"Bypass"},
    {16384, 4},
    {
      16384,
      4,
      4
    },
    {
      16384,
      8,
      4
    },
    {
      16384,
      12,
      4
    },
    {
      16384,
      16,
      4
    },
    {
      16384,
      20,
      4
    },
    {
      16384,
      508,
      4
    }
  }, {
    {
      0,
      100,
      4,
      true
    }
  })
  gg.clearResults()
gg.alert("تم كسر الحمايه ... فجرهم 👹")
end-- Sniper


function sj()
 gg.clearResults()
gg.setRanges(gg.REGION_C_DATA)
gg.searchNumber("-2.3805679e21;-1.3620439e28;-1.3978205e24:9", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("-1.3620439e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(99)
gg.editAll("0", gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('أزالة الضباب تم️')
end
 

function b() 
gg.clearResults()
qmnb = {
{["memory"] = 32},
{["name"] = "parachute"},
{["value"] = 4934256342887038976, ["type"] = 32},
{["lv"] = 5015954454889594880, ["offset"] = -8, ["type"] = 32},
{["lv"] = 4935945192765931520, ["offset"] = -4, ["type"] = 32},
{["lv"] = 5006313936924573696, ["offset"] = 4, ["type"] = 32},
}
qmxg = {
{["value"] = 999999, ["offset"] = 0, ["type"] = 16},
{["value"] = 989999, ["offset"] = -8, ["type"] = 16},
{["value"] = 998999, ["offset"] = -4, ["type"] = 16},
{["value"] = 999899, ["offset"] = 4, ["type"] = 16},

}
xqmnb(qmnb)
gg.toast("🎐ᴘᴀʀᴀᴄʜᴜᴛᴇ")
end

function mw6()
    gg.clearResults()
    gg.setRanges(gg.REGION_ANONYMOUS)
    gg.searchNumber('91000;2.29999995232;1.8', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.searchNumber('2.29999995232;1.8', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.getResults(15)
    gg.editAll('0', gg.TYPE_FLOAT)
    gg.toast('AWM Burst ACTIVATED')
  end
function nr()
qmnb = {
{["memory"] = 32},
{["name"] = "antenna"},
{["value"] = 4804934254803878643, ["type"] = 32},
{["lv"] = -4410762456449774017, ["offset"] = 4, ["type"] = 32},
{["lv"] = 4575657222473777152, ["offset"] = 12, ["type"] = 32},
}
qmxg = {
{["value"] = 4610560119594024960, ["offset"] = 0, ["type"] = 32},
{["value"] = -4410762456495030272, ["offset"] = 4, ["type"] = 32},
{["value"] = 4575657222557253632, ["offset"] = 12, ["type"] = 32},

}
xqmnb(qmnb)
gg.clearResults()
 gg.toast("🎶ᴀɴᴛᴇɴɴᴀ")
 gg.clearResults()
qmnb = {
{["memory"] = 32},
{["name"] = "nor"},
{["value"] = 8247572459728890950, ["type"] = 32},
{["lv"] = 32481181722559348, ["offset"] = 4, ["type"] = 32},
}
qmxg = {
{["value"] = 1634692266, ["offset"] = 0, ["type"] = 4},

}
xqmnb(qmnb)
gg.clearResults()
gg.setRanges(gg.REGION_C_DATA)
gg.searchNumber("-2.8111605e28;-3.7444097e28;-1.1144502e28;128.0::", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(1)
gg.editAll("0", gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_C_DATA)
gg.searchNumber("-6.1549454e27;1.8638966e-20;-1.1144502e28;0::", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(1)
gg.editAll("0", gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_C_DATA)
gg.searchNumber("-1.2382424e28;-1.4239333e28;-1.1144502e28;-1.8331474e27;-    7.1608877e24::", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(2)
gg.editAll("90", gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_C_ALLOC)
gg.searchNumber("909391408;808923191::8", gg.TYPE_DWORD)
gg.getResults(999)
gg.editAll("1089886885", gg.TYPE_DWORD)
gg.clearResults()
gg.setRanges(gg.REGION_C_ALLOC)
gg.searchNumber("909391408", gg.TYPE_DWORD)
gg.getResults(999)
gg.editAll("1089886885", gg.TYPE_DWORD)
gg.toast("🎯ɴᴏ ʀᴇᴄᴏɪʟ")
gg.clearResults()
qmnb = {
{["memory"] = 32},
{["name"] = "headshot99"},
{["value"] = 1106509824, ["type"] = 32},
{["lv"] = 4752423507886342144, ["offset"] = -4, ["type"] = 32},
{["lv"] = 4740038608910024704, ["offset"] = -8, ["type"] = 32},

}
qmxg = {
{["value"] = 390, ["offset"] = 0, ["type"] = 16},
{["value"] = 390, ["offset"] = -4, ["type"] = 16},
}
xqmnb(qmnb)
gg.clearResults()
gg.setRanges(gg.REGION_C_DATA)
  gg.searchNumber("360;0.0001;1478828288", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(100)
  gg.editAll("9999", gg.TYPE_FLOAT)
gg.toast("🌡ʜᴇᴀᴅ sʜᴏᴛ")
 gg.clearResults()
  gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber("88.150177001I5;15:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.searchNumber("15", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(2)
  gg.editAll("500", gg.TYPE_FLOAT)
  gg.toast("45%")
  gg.clearResults()
  gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber("-88.66F08D2895E;26:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.searchNumber("26", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(2)
  gg.editAll("500", gg.TYPE_FLOAT)
  gg.toast("75%")
  gg.clearResults()
  gg.setRanges(gg.REGION_ANONYMOUS)
  gg.searchNumber("90.4850692749;2G.25;28:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.searchNumber("27.25;28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.getResults(2)
  gg.editAll("500", gg.TYPE_FLOAT)
  gg.clearResults()
  gg.toast("🚀 Bullet Tracking ON 🚀")
 gg.clearResults()
    gg.setRanges(gg.REGION_ANONYMOUS)
    gg.searchNumber('90.4850692749F;16', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.searchNumber('16', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.getResults(20)
    gg.editAll('99', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.searchNumber('9.20161819458;23;25;30.5', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.getResultCount()
    gg.searchNumber('25;30.5', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.getResults(10)
    gg.editAll('240', gg.TYPE_FLOAT)
    gg.toast('✖ ʙʀᴜᴛᴀʟ ᴍᴀɢɪᴄ ʙᴜʟʟᴇᴛ')
end
function ant()
if antenna == off then
qmnb = {
{["memory"] = 32},
{["name"] = "antenna"},
{["value"] = 4804934254803878643, ["type"] = 32},
{["lv"] = -4410762456449774017, ["offset"] = 4, ["type"] = 32},
{["lv"] = 4575657222473777152, ["offset"] = 12, ["type"] = 32},
}
qmxg = {
{["value"] = 4610560119594024960, ["offset"] = 0, ["type"] = 32},
{["value"] = -4410762456495030272, ["offset"] = 4, ["type"] = 32},
{["value"] = 4575657222557253632, ["offset"] = 12, ["type"] = 32},

}
xqmnb(qmnb)
gg.clearResults()
 antenna = on
 gg.toast("🎶ᴀɴᴛᴇɴɴᴀ")
 else
 qmnb = {
{["memory"] = 32},
{["name"] = "antenna"},
{["value"] = 4610560119594024960, ["type"] = 32},
{["lv"] = -4410762456495030272, ["offset"] = 4, ["type"] = 32},
{["lv"] = 4575657222557253632, ["offset"] = 12, ["type"] = 32},
}
qmxg = {
{["value"] = 4804934254803878643, ["offset"] = 0, ["type"] = 32},
{["value"] = -4410762456449774017, ["offset"] = 4, ["type"] = 32},
{["value"] = 4575657222473777152, ["offset"] = 12, ["type"] = 32},

}
xqmnb(qmnb)
 antenna = off
end
end

function wal()
gg.clearResults()
  gg.setRanges(gg.REGION_VIDEO or gg.REGION_BAD)
  gg.searchNumber("2", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.refineAddress("200")
  gg.getResults(999)
  gg.editAll("120", gg.TYPE_FLOAT)
  gg.clearResults()
  gg.searchNumber("2", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
  gg.refineAddress("930")
  gg.getResults(999)
  gg.editAll("120", gg.TYPE_FLOAT)
  gg.clearResults()
  gg.toast("WALLHACK SD675 Activated")
gg.clearResults()
gg.searchNumber("8,196D;8,192D;8,200D::", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("8200", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(10)
gg.editAll("6", gg.TYPE_DWORD)
gg.clearResults()
gg.toast("Color Red AKTIF💯")
end

function antg()
  gg.clearResults()
    gg.setRanges(32)
    gg.searchNumber('0.98900693655~0.98900723457;0.14786802232~0.14786840975;1.1920926e-7::9', 16, false, 536870912, 0, -1)
    gg.searchNumber('0.98900693655~0.98900723457', 16, false, 536870912, 0, -1)
    gg.getResults(100)
    gg.editAll('16000', 16)
    gg.toast('A N T E N A OK ')
end

function gm() 
qmnb = {
{["memory"] = 32},
{["name"] = "antenna"},
{["value"] = 4804934254803878643, ["type"] = 32},
{["lv"] = -4410762456449774017, ["offset"] = 4, ["type"] = 32},
{["lv"] = 4575657222473777152, ["offset"] = 12, ["type"] = 32},
}
qmxg = {
{["value"] = 4610560119594024960, ["offset"] = 0, ["type"] = 32},
{["value"] = -4410762456495030272, ["offset"] = 4, ["type"] = 32},
{["value"] = 4575657222557253632, ["offset"] = 12, ["type"] = 32},

}
xqmnb(qmnb)
gg.clearResults()
 antenna = on
 gg.toast("🎶ᴀɴᴛᴇɴɴᴀ")
 gg.clearResults()
  gg.setRanges(32)
  gg.searchNumber("1;1;1;0.0001;20;0.0005;0.4::50", 16, false, 536870912, 0, -1)
  gg.searchNumber("1", 16, false, 536870912, 0, -1)
  gg.getResults(300)
  gg.editAll("1.06", 16)
  gg.clearResults()
  gg.toast("⁦تم")
 gg.clearResults()
    gg.setRanges(32)
    gg.searchNumber('0.98900693655~0.98900723457;0.14786802232~0.14786840975;1.1920926e-7::9', 16, false, 536870912, 0, -1)
    gg.searchNumber('0.98900693655~0.98900723457', 16, false, 536870912, 0, -1)
    gg.getResults(100)
    gg.editAll('16000', 16)
    gg.toast('A N T E N A OK ')
   gg.clearResults()
  gg.setRanges(gg.REGION_BAD) 
gg.clearResults()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.clearResults()
gg.searchNumber("220;178;15 ",gg.TYPE_FLOAT, false,gg.SIGN_EQUAL, 0, -1)
gg.searchNumber("220",gg.TYPE_FLOAT, false,gg.SIGN_EQUAL, 0, -1)
gg.getResults(300)
gg.editAll("438",gg.TYPE_FLOAT)
gg.clearResults()
gg.toast("(منظور الايباد) تم ")
end


function lo()
gg.clearResults()
 gg.setRanges(8)
  gg.searchNumber("360;-360;180;0.0001;1478828288:97", 16, false, 536870912, 0, -1)
  gg.searchNumber("0.0001", 16, false, 536870912, 0, -1)
  gg.getResults(200)
  gg.editAll("500", 16, false, 536870912, 0, -1)
  gg.clearResults()
    gg.toast("⁦⚜️⁩تم تفعيل ايم بوت ⚜️")
   gg.clearResults()
gg.setRanges(32)
gg.searchNumber("7499628;1935766087;29541::", 4, false, 536870912, 0, -1)
gg.getResults(1)
gg.searchNumber("29541", 4, false, 536870912, 0, -1)
gg.getResultsCount()
gg.getResults(1)
gg.editAll("1886999666", 4)
gg.toast("No Grass Erangel activated!")
end



function EXIT()    
    print('☢ BY ABOHAMZEH ☯️')
    gg.setVisible(true)
    os.exit()
  end

while true do
  if gg.isVisible(true) then
    PUBGMH = 1
    gg.setVisible(false)
  end
  gg.clearResults()
  if PUBGMH == 1 then
    HOME()
  end
end
